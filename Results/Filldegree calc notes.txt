Source 1: 60/60 - 0/60
Tote 1: 0/100 - 60/100

Source 2: Split 40 / 20
40 tu ich rein, 20 is das was ich zählen muss

Tote 1: 100/100
Source 2: 20
Für einen minfilldegree von 80% muss ich garantieren dass der min-spike erst bei 80 stück (dh 80% passiert)
Jetzt passiert er bei 60 stück

Source 2 -> Tote 2: 20/100
Source 3 -> Tote 2: 80/100

dh wenn ich 20 absplitten darf komm ich eh auf 100%
wenn ichs aber nicht darf dann komm ich nur auf 60%
dh größter



Bei Source = 80
Source 1 -> Tote 1: 80/100
Source 2 -> Split 20-60 (20) -> Tote 1: 100/100
Source 2 -> Tote 2: 60/100
Source 3 -> Split 40-40 (40) -> Tote 2: 100/100
dh größter split (was ich reinleg) is von meiner gesamtkapazität 40% oder vom source-count 50%

für target filldegree 52% muss ich bei 51% noch splitten, dh mein max-split muss 52 sein

bei target filldegree 52 und 2 compartments a 50 muss ich bei 0,5*52 splitten ?


Nochmal:
Bei einem target filldegree von 80 gibts für den range 51-100 stück einen obergrenzen von 80 für max-splits
Bei einem target filldegree von 80 gibts für den range 26-50 stück


Target 0.5 splittet noch immer, das anschaun
ansonsten target 0.5 und 1 mal visuell vlg zwecks zeit


----------------------------------------------------
Annahmen:
* Gleichverteilte Produktquantitäten

Erste Konklusionen:
* Bei TimePerCount = 0.5 und TimePerTote = 8 und alle anderen verhältnissen (auch wenn ich timePerCompartment verändere) 
  komm ich immer auf ein zeitliches minimum bei ~0.6+/-0.1 weil ich bei höheren filldegrees zwar mehr zählen muss 
  aber weniger totes brauche
* TimePerCompartment hat keinen filldegree-spezifischen einfluss (war nur ein charting-artefakt)
* Comparison mit targetFilldegree is noch immer suboptimal ohne wissen wieviel noch nachkommt:
  Carton 4: Putting 8/17 into U0_0 (25/25) (|25||17||17||17|) Counting split (8) (8 | 9)
  Carton 4: Putting 9/9 into U1_0 (9/25) (|25||17||17||17|) (|9|||||||) 
  Wenns da jetzt aus is, wars eher blöd nochmal einen tote auzumachen
* Der Unterschied zwischen 1 und unendlich vielen Target-Tote locations ist minimal und wh nur ein artefakt der endlichen Mengen 
  mit denen simuliert wurde
  Er lagert halt immer im letzten statt im ersten zu, dh die Mengen sind anders, die notwendigen splits aber immer (mit ausnahme von 
  zufällig nicht-fully decantable im letzten) gleich
* Ab welchem verhältnis/werten is fully decant immer schneller?
  TimeToCount & TimeForNewTote - where is the minimum (target%)
	  0.25& 8.0: 81% (Faktor: 32)
	  0.5 & 8.0: 66% (Faktor: 16)
	  1.5 & 8.0: 57% (Faktor: 5,3)
	  5.0 & 8.0: 53% (Faktor: 1,6)
	  0.25& 2.0: 65% (Faktor: 8)
	  0.5 & 2.0: 59% (Faktor: 4) 
	  1.5 & 2.0: 53% (Faktor: 1.3)
	  0.25& 20.0: 92% (Faktor: 80)
	  0.5 & 20.0: 82% (Faktor: 40)
	  1.5 & 20.0: 65% (Faktor: 13)
	  5.0 & 20.0: 56% (Faktor: 4)
	  Milchmädchen lineare approx (siehe TimeForNewTote vs TimePerCount.ods):
	  55% + 0.75 * Faktor
  * Größere Compartmenttimes verschieben Minimum geringfügig nach rechts, in realistischen ranges (verhältnissen) 
    aber nicht mehr als ein paar prozent max
  * Gelten die aus Absolutwerten errechneten verhältnisse?
  * Wie minimal sind die Minima im Gegensatz zu den anderen target-filldegrees, vorallem gegenüber min und max?
  * TODO maxFill mit 1 targetTote

Main Konklusions:
* MaxFill (immer zulagern, limes filldegree = 100%) 
	* Mit unendlich target totes: braucht bei src-qties nahe an den compartment-qty grenzen recht lang weil es ... (see TimeDetailsComparison.ods)
	* Mit 1 target tote:
* Fully decant (nie zulagern)
	* Filldegree-Kurve bricht auf 50% ein bei jeder Überschreitung der Compartment-Größe (geg. nächstes compartment is doppelt so groß)
	* Anzahl Target-totes machen keinen Unterschied weil ja sowieso nie zugelagert wird
	* Zeitverhalten = einen step-function,  ## (siehe time details comparison.ods)
wann brauchen sie im schnitt gleich?	
